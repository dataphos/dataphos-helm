


# The namespace to deploy the Persistor into.
namespace: dataphos

# Images.
images:
  persistor: syntioinc/dataphos-persistor-core:v1.0.0
  indexer: syntioinc/dataphos-persistor-indexer:v1.0.0
  indexerApi: syntioinc/dataphos-persistor-indexer-api:v1.0.0
  indexerMongoDb: mongo:4.0
  resubmitter: syntioinc/dataphos-persistor-resubmitter:v1.0.0

# Indexer.
# Each entry in this object is considered
# a separate Indexer instance.
# The name of the key is the index identifier.
indexer:

  # This is the definition of one indexer object.
  # An indexer object consists of a topic onto which
  # metadata will arrive, the consumer ID for the metadata,
  # a reference to the broker, and, finally, the size of the Mongo
  # storage that will store the metadata.
  # Each indexer instance generates its own separate API.
  some-indexer:
    broker: some-kafka
    topic: idx-topic
    consumerID: idx-topic-sub
    deadletterTopic: idx-dl-topic
    replicas: 1 # Scale the service exposing the metadata
    consumerReplicas: 1 # Scale the consumers reading and storing the metadata
    storageSize: 1Gi

# Resubmitter.
# Each entry in this object is considered
# a separate Resubmitter instance.
# Multiple resubmitters can be tied to the same
# indexer APT but multiple brokers.
resubmitter:

  # Here is the definition of a single resubmitter object.
  # A resubmitter object needs to understand to which
  # indexer API it reads metadata from, which storage object
  # it will be pulling data from and which broker the messages
  # should be resubmitted to.
  some-resubmitter:
    broker: some-kafka
    storage: some-storage
    indexer: some-indexer
    serviceAccountSecret: pubsub-key
  some-resubmitter-2:
    broker: some-pubsub
    storage: some-storage
    indexer: some-indexer
    serviceAccountSecret: pubsub-key

# The Persistor.
# Each entry is a separate Persistor instance.
# A persistor instance needs to understand from which
# broker it's pulling from and to which object it's
# storing to. Optionally, it needs to be pointed to
# a particular Indexer instance.
persistor:

  # Here is the definition of a single Persistor object.
  some-pes:
    broker: some-kafka # References a broker
    topic: input-topic # Input topic name
    consumerID: input-topic-sub # Consumer / Subscription ID
    storage: some-storage # References the pre-defined type of storage below
    storageTargetID: bucket # Storage ID (bucket or container; depends on the storage definition)
    indexer: some-indexer # Indexer reference (if not set the indexer plugin is disabled)
    deadletterTopic: dl-topic
    serviceAccountSecret: pubsub-key
    replicas: 1 # Number of replicas per Persistor
  some-other-pes:
    broker: some-pubsub
    pullMode: batch
    topic: input-topic-2
    consumerID: input-topic-sub-2
    storage: some-storage
    storageTargetID: bucket1
    deadletterBroker: some-pubsub
    deadletterTopic: dl-topic-2
    serviceAccountSecret: pubsub-key
    replicas: 2

# The brokers to be used by the system.
# Each entry is a separate broker definition.
# This can be a reference to a GCP project or
# a Kafka cluster, respectively.
brokers:
  some-kafka: 
    type: kafka
    brokerAddr: "some_addr"
  some-pubsub:
    type: pubsub
    projectID: dataphos-project-dev

# Storage definitions.
# Each entry is a separate target storage.
storage:
  some-storage:
    type: gcs
    projectID: dataphos-project-dev
