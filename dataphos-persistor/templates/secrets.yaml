# Check if the user specified private Docker registry credentials.
{{- if .Values.registryCredentials }}
# Loop over the credentials list.
{{- range .Values.registryCredentials }}
# Form a Kubernetes secret name. The name is generated by replacing the dots in the name of the Docker 
# registry with hyphens. Eg. hub.dataphos.xyz -> hub-dataphos-xyz-pull-secret
{{- $registrySecretName := printf "%s-pull-secret" .registry | replace "." "-" | lower -}}
# Check if the secret already exists. This is required because the Helm release installation will fail
# if it tries to apply a Kubernetes manifest that already exists.
{{- if not (lookup "v1" "Secret" $.Values.namespace $registrySecretName) }}
# Create the Docker secret.
apiVersion: v1
kind: Secret
metadata:
  name: {{ $registrySecretName }}
  namespace: {{ $.Values.Namespace }}
type: kubernetes.io/dockerconfigjson
data:
# Form the dockerconfigjson and base64 encode it. 
  .dockerconfigjson: {{ printf "{\"auths\": {\"%s\": {\"username\": \"%s\", \"password\": \"%s\", \"auth\": \"%s\"}}}" .registry .username .password (printf "%s:%s" .username .password | b64enc) | b64enc }}
---
{{- end }}
{{- end }}
{{- end }}